/*
ЁЯУЭ р╣Вр╕Ир╕Чр╕вр╣М OOP (Object-Oriented Programming)
р╣Вр╕Ир╕Чр╕вр╣М: р╕гр╕░р╕Ър╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕гр╣Йр╕▓р╕Щр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н ЁЯУЪ

р╣Гр╕лр╣Йр╕Др╕╕р╕Ур╕кр╕гр╣Йр╕▓р╕Зр╕гр╕░р╕Ър╕Ър╕гр╣Йр╕▓р╕Щр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Вр╕Фр╕вр╣Гр╕Кр╣Й OOP р╕Лр╕╢р╣Ир╕Зр╕Ир╕░р╕Хр╣Йр╕нр╕Зр╕бр╕╡ р╕Др╕ер╕▓р╕кр╕лр╕ер╕▒р╕Б р╣Бр╕ер╕░ р╕Др╕ер╕▓р╕кр╕вр╣Ир╕нр╕в р╕Хр╕▓р╕бр╕Чр╕╡р╣Ир╕Бр╕│р╕лр╕Щр╕Ф

1я╕ПтГг р╕Др╕ер╕▓р╕к Book (р╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н)
р╣Гр╕лр╣Йр╕кр╕гр╣Йр╕▓р╕З р╕Др╕ер╕▓р╕к Book р╕Чр╕╡р╣Ир╕бр╕╡р╕Др╕╕р╕Ур╕кр╕бр╕Ър╕▒р╕Хр╕┤р╕Фр╕▒р╕Зр╕Щр╕╡р╣Й

р╕Др╕╕р╕Ур╕кр╕бр╕Ър╕▒р╕Хр╕┤ (Properties)

title (р╕Кр╕╖р╣Ир╕нр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н)
author (р╕Кр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Бр╕Хр╣Ир╕З)
price (р╕гр╕▓р╕Др╕▓р╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н)
stock (р╕Ир╕│р╕Щр╕зр╕Щр╕Др╕Зр╣Ар╕лр╕ер╕╖р╕н)
р╣Ар╕бр╕Шр╕нр╕Ф (Methods)

getDetail() тЖТ р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н
sell(quantity) тЖТ р╕Вр╕▓р╕вр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Бр╕ер╕░р╕ер╕Фр╕кр╕Хр╣Зр╕нр╕Б (р╕лр╕▓р╕Бр╕кр╕Хр╣Зр╕нр╕Бр╣Др╕бр╣Ир╕Юр╕нр╣Гр╕лр╣Йр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ)
addStock(quantity) тЖТ р╣Ар╕Юр╕┤р╣Ир╕бр╕Ир╕│р╕Щр╕зр╕Щр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н

2я╕ПтГг р╕Др╕ер╕▓р╕к Member (р╕кр╕бр╕▓р╕Кр╕┤р╕Бр╕Вр╕нр╕Зр╕гр╣Йр╕▓р╕Щ)
р╣Гр╕лр╣Йр╕кр╕гр╣Йр╕▓р╕З р╕Др╕ер╕▓р╕к Member р╕Чр╕╡р╣Ир╕бр╕╡р╕Др╕╕р╕Ур╕кр╕бр╕Ър╕▒р╕Хр╕┤р╕Фр╕▒р╕Зр╕Щр╕╡р╣Й

р╕Др╕╕р╕Ур╕кр╕бр╕Ър╕▒р╕Хр╕┤ (Properties)
name (р╕Кр╕╖р╣Ир╕нр╕кр╕бр╕▓р╕Кр╕┤р╕Б)
email (р╕нр╕╡р╣Ар╕бр╕ер╕кр╕бр╕▓р╕Кр╕┤р╕Б)
points (р╣Бр╕Хр╣Йр╕бр╕кр╕░р╕кр╕б)
р╣Ар╕бр╕Шр╕нр╕Ф (Methods)
getInfo() тЖТ р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕кр╕бр╕▓р╕Кр╕┤р╕Б
earnPoints(amount) тЖТ р╣Др╕Фр╣Йр╣Бр╕Хр╣Йр╕бр╕кр╕░р╕кр╕бр╣Ар╕Юр╕┤р╣Ир╕бр╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕Лр╕╖р╣Йр╕нр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н
redeemPoints(points) тЖТ р╣Гр╕Кр╣Йр╣Бр╕Хр╣Йр╕бр╕кр╕░р╕кр╕бр╣Ар╕Ыр╣Зр╕Щр╕кр╣Ир╕зр╕Щр╕ер╕Ф (р╕лр╕▓р╕Бр╣Бр╕Хр╣Йр╕бр╣Др╕бр╣Ир╕Юр╕нр╣Гр╕лр╣Йр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ)

3я╕ПтГг р╕Др╕ер╕▓р╕к Bookstore (р╕гр╣Йр╕▓р╕Щр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н)
р╣Гр╕лр╣Йр╕кр╕гр╣Йр╕▓р╕З р╕Др╕ер╕▓р╕к Bookstore р╕Чр╕╡р╣Ир╕бр╕╡р╕Др╕╕р╕Ур╕кр╕бр╕Ър╕▒р╕Хр╕┤р╕Фр╕▒р╕Зр╕Щр╕╡р╣Й

р╕Др╕╕р╕Ур╕кр╕бр╕Ър╕▒р╕Хр╕┤ (Properties)

name (р╕Кр╕╖р╣Ир╕нр╕гр╣Йр╕▓р╕Щ)
books (р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╕Чр╕╡р╣Ир╕бр╕╡р╣Гр╕Щр╕гр╣Йр╕▓р╕Щ)
members (р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╕Вр╕нр╕Зр╕гр╣Йр╕▓р╕Щ)
р╣Ар╕бр╕Шр╕нр╕Ф (Methods)

addBook(book) тЖТ р╣Ар╕Юр╕┤р╣Ир╕бр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Ар╕Вр╣Йр╕▓р╣Др╕Ыр╣Гр╕Щр╕гр╣Йр╕▓р╕Щ
sellBook(book, quantity, member) тЖТ р╕Вр╕▓р╕вр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Бр╕ер╕░р╣Гр╕лр╣Йр╣Бр╕Хр╣Йр╕бр╕кр╕бр╕▓р╕Кр╕┤р╕Б
registerMember(member) тЖТ р╕ер╕Зр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Гр╕лр╕бр╣И
showInventory() тЖТ р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Гр╕Щр╕гр╣Йр╕▓р╕Щ\

4я╕ПтГг р╕Др╕ер╕▓р╕к VIPMember (р╕кр╕бр╕▓р╕Кр╕┤р╕Бр╕Юр╕┤р╣Ар╕ир╕й)
р╣Гр╕лр╣Йр╕кр╕гр╣Йр╕▓р╕З р╕Др╕ер╕▓р╕к VIPMember р╕Чр╕╡р╣И р╕кр╕╖р╕Ър╕Чр╕нр╕Фр╕Ир╕▓р╕Б Member

р╕Др╕╕р╕Ур╕кр╕бр╕Ър╕▒р╕Хр╕┤ (Properties)

discountRate (р╕кр╣Ир╕зр╕Щр╕ер╕Фр╕Юр╕┤р╣Ар╕ир╕йр╕Вр╕нр╕Зр╕кр╕бр╕▓р╕Кр╕┤р╕Б VIP)
р╣Ар╕бр╕Шр╕нр╕Ф (Methods)

getDiscount(price) тЖТ р╕Др╕│р╕Щр╕зр╕Ур╕гр╕▓р╕Др╕▓р╕лр╕ер╕▒р╕Зр╕лр╕▒р╕Бр╕кр╣Ир╕зр╕Щр╕ер╕Ф
earnPoints(amount) тЖТ р╕кр╕бр╕▓р╕Кр╕┤р╕Б VIP р╣Др╕Фр╣Йр╣Бр╕Хр╣Йр╕бр╕кр╕░р╕кр╕бр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Ыр╣Зр╕Щ 2 р╣Ар╕Чр╣Ир╕▓р╕Вр╕нр╕Зр╕Ыр╕Бр╕Хр╕┤

р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕р╣Вр╕Ир╕Чр╕вр╣М р╕Цр╕╣р╕Бр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щ р╣Вр╕Фр╕в ChatGPT р╕Чр╕│р╣Ар╕Юр╕╖р╣Ир╕н р╕Эр╕╢р╕Бр╣Ар╕Вр╕╡р╕вр╕Щ Node.JS 
*/

class Book {
    #title;
    #author;
    #price;
    #stock;
    constructor(title, author, price, stock) {
        this.#title = title;
        this.#author = author;
        this.#price = price;
        this.#stock = stock;
    }
    get title() { return this.#title; }
    get author() { return this.#author; }
    get price() { return this.#price; }
    get stock() { return this.#stock; }
    getDetail() {
        return `Book Name: ${this.#title}\nAuthor: ${this.#author}\nPrice: ${this.#price}\nStock: ${this.#stock}`;
    }
    sell(quantity) {
        if (!Number.isInteger(quantity) || quantity <= 0) {
            return "Error: Quantity must be a positive integer";
        }
    
        if (this.#stock < quantity) {
            return "Error: Not enough stock";
        }
    
        this.#stock -= quantity;
        return `Success: Sold ${quantity} copies of ${this.#title}`;
    }
    addStock(quantity) {
        if (!Number.isInteger(quantity) || quantity <= 0) {
            return "Error: Quantity must be a positive integer";
        }
        this.#stock += quantity;
        return `Success: Added ${quantity} copies of ${this.#title} to stock`;
    }
}

class Member {
    #name;
    #email;
    #points;
    constructor(name, email) {
        this.#name = name;
        this.#email = email;
        this.#points = 0;
    }
    get name() { return this.#name; }
    get email() { return this.#email; }
    get points() { return this.#points; }
    getInfo() {
        return `Name: ${this.#name}\nEmail: ${this.#email}\nPoints: ${this.#points}`;
    }
    earnPoints(points) {
        if (!Number.isInteger(points) || points < 0) {
            return "Error: Points must be a positive integer";
        }
        this.#points += points;
        return `Success: Earned ${points} points`;
    }
    redeemPoints(points) {
        if (!Number.isInteger(points) || points < 0) {
            return "Error: Points must be a positive integer";
        }
        if (points > this.#points) {
            return "Error: Not enough points";
        }
        this.#points -= points;
        return `Success: Redeemed ${points} points`;
    }
}

class VIPMember extends Member {
    #discountRate;
    constructor(name, email, discountRate) {
        super(name, email);
        this.#discountRate = discountRate;
    }

    get discountRate() { return this.#discountRate; }

    getDiscount(price) {
        return price * (1 - this.#discountRate / 100);
    }

    earnPoints(points) {
        if (!Number.isInteger(points) || points < 0) {
            return "Error: Points must be a positive integer";
        }

        return super.earnPoints(points * 2);
    }
}

class Bookstore {
    #name;
    #books;
    #members;

    constructor(name) {
        this.#name = name;
        this.#books = [];
        this.#members = [];
    }

    get name() { return this.#name; }
    get books() { return this.#books; }
    get members() { return this.#members; }

    registerMember(member) {
        if (member instanceof Member) {
            this.#members.push(member);
            return `Success: ${member.name} registered as a member`;
        } else {
            return "Error: Invalid member";
        }
    }

    addBook(book) {
        if (book instanceof Book) {
            this.#books.push(book);
            return `Success: ${book.title} added to bookstore`;
        } else {
            return "Error: Invalid book";
        }
    }

    findBookbyName(title) {
        return this.#books.find(book => book.title === title) || "Book not Found";
    }

    findBookbyAuthor(author) {
        return this.#books.filter(book => book.author === author) || "Book not Found";
    }

    findMemberbyName(name) {
        return this.#members.find(member => member.name === name) || "Member not Found";
    }

    sellBook(book, quantity, member) {
        if (!(book instanceof Book) || !(member instanceof Member)) {
            return "Error: Invalid book or member";
        }

        let saleResult = book.sell(quantity);
        if (saleResult.startsWith("Success")) {
            let pointsEarned = quantity * Math.floor(book.price / 10);
            member.earnPoints(pointsEarned);
            return `${saleResult}. ${member.name} earned ${pointsEarned} points.`;
        }
        return saleResult;
    }

    showInventory() {
        if (this.#books.length === 0) {
            return "No books in inventory";
        }

        return this.#books.map(book => book.getDetail()).join("\n\n");
    }
}

/* TEST */

// р╕кр╕гр╣Йр╕▓р╕Зр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н
const book1 = new Book("Harry Potter", "J.K. Rowling", 500, 10);
const book2 = new Book("The Lord of the Rings", "J.R.R. Tolkien", 800, 5);

// р╕кр╕гр╣Йр╕▓р╕Зр╕гр╣Йр╕▓р╕Щр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н
const store = new Bookstore("My Bookstore");

// р╣Ар╕Юр╕┤р╣Ир╕бр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Ар╕Вр╣Йр╕▓р╕гр╣Йр╕▓р╕Щ
console.log(store.addBook(book1));
console.log(store.addBook(book2));

// р╕кр╕гр╣Йр╕▓р╕Зр╕кр╕бр╕▓р╕Кр╕┤р╕Б
const member1 = new Member("Alice", "alice@example.com");
const vipMember = new VIPMember("Bob", "bob@example.com", 10);

// р╕ер╕Зр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щр╕кр╕бр╕▓р╕Кр╕┤р╕Б
console.log(store.registerMember(member1));
console.log(store.registerMember(vipMember));

// р╕Вр╕▓р╕вр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Гр╕лр╣Йр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╕Ыр╕Бр╕Хр╕┤
console.log(store.sellBook(book1, 2, member1));

// р╕Вр╕▓р╕вр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Гр╕лр╣Й VIPMember (р╕Ир╕░р╣Др╕Фр╣Йр╣Бр╕Хр╣Йр╕б x2)
console.log(store.sellBook(book2, 1, vipMember));

// р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╕Чр╕╡р╣Ир╣Ар╕лр╕ер╕╖р╕н
console.log(store.showInventory());

// р╣Гр╕Кр╣Йр╣Бр╕Хр╣Йр╕бр╕кр╕░р╕кр╕б
console.log(member1.redeemPoints(20));
console.log(vipMember.redeemPoints(50));
